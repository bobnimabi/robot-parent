一、与platformId有关的配置

    1.httpclient的设定属性
    	连接池的属性
            MaxTotal                最大连接数
            DefaultMaxPerRoute      默认路由数
            ValidateAfterInactivity 多长时间校验一次

    2.requestConfig的设定属性
         expectContinueEnabled;
         proxy; 代理
         localAddress; 本地ip和端口
         staleConnectionCheckEnabled; 连接检查
         cookieSpec; cookie策略
         redirectsEnabled; 是否重定向
         relativeRedirectsAllowed;
         circularRedirectsAllowed; 是否循环重定向
         maxRedirects; 最大重定向
         authenticationEnabled;
         targetPreferredAuthSchemes;
         proxyPreferredAuthSchemes;
         connectionRequestTimeout; 连接池获取请求超时时间
         connectTimeout; 连接超时时间
         socketTimeout; socket握手时间
         contentCompressionEnabled;  是否开启压缩

二、组织
解决：
    在配置文件里面写死，以后可以基于nacos灵活配置
    其实由于现在是专用的机器人，用不到大并发
    1.连接池（程序员配置）
        一次配置一个

解决：
    每次请求都要获取一次配置
    2.requestConfig（程序员配置）
        每个接口都有自己的RequestConfig
        关键：
            是否重定向
            机器人限制时间
            ip限制时间
            是否重试（支持到请求级别，可能需要修改源码）
解决：
    每次获取一次全局的，绑定在requestConfig里面 ===》代理做成拦截器的形式

    ===》表不变
    3.代理IP+端口（管理员配置，特殊的需要ip池的代码实现）
        机器人可以绑定+请求也可以绑定

解决：
    思路：每次请求前获取表里全局的,===》头做成拦截器的形式

    ===》表不变
          请求自己的特殊头分为2种
          全局头：
            固定的：配置在表里面
            动态的：保存在cookie的属性里面，使用请求拦截器携带
          局部头：
            固定的：配置在表里面（对全局头有覆盖作用）
            动态的：保存在cookie的属性里面(对全局头有覆盖作用)

    4.请求头（程序员配置）
        全局请求头

解决：
    ===》在execute部分在获取

    5.domain
        tenantId，platform有关系

    6.path
        只与platform有关系

    7.cookie
        写成拦截器的形式
        a.获取cookie的时候，自动剔除过期的cookie